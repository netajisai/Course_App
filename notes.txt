controllers --> business logic, what happens when a route is hit

middleware --> Holds functions that run before hitting your main logic(controllers)
Authentication
Authorization
Logging
Input validation

models --> contains mongooose schemas

routes --> Defines endpoint(URLs) that users/admins interact with
The routes call controllers to handle the logic

Utils --> contains helper functions or utilities you reuse across the app
Examples:
Email Validation
Unique ID generator
Format response

Config --> used to organize configuration settings
Examples:
db.js --> Mongo DB connection logic
jwt.js --> JWT secret and options
env.js --> Loading environment variables


App.js --> 
create the Express app
Register middleware(app.use)
Mount routes(app.use('/admin, adminRoutes))
Apply JOSN Parsing

Server.js --> Entry point of app (launcher for Node JS Server)
imports the app from app.js
Connects to the database
Starts the server(app.listen)



🎓 Admin Course Endpoints
Method	Endpoint	Purpose
POST	/api/v1/course/	✅ Create a new course
PUT	/api/v1/course/:courseId	✏️ Update a course (only if created by admin)
DELETE	/api/v1/course/:courseId	🗑 Delete a course (if owned by admin)
GET	/api/v1/course/admin	📋 Get all courses created by the admin
GET	/api/v1/course/:courseId	🔍 Get a specific course by ID (owned)

👤 User Course Endpoints
Method	Endpoint	Purpose
GET	/api/v1/course/user	🛍 Get all published courses
GET	/api/v1/course/user/:courseId	🔍 Get one published course by ID
POST	/api/v1/course/user/:courseId/buy	💳 Purchase a course
GET	/api/v1/purchases	📦 Get all purchased courses by user


📦 OPTIONAL / NICE-TO-HAVE
Feature	Endpoint	Purpose
Auth Check	GET /api/v1/user/profile	Get current user info (JWT verified)
Admin Courses	GET /api/v1/admin/courses	Alternative to /course/admin
Search	GET /api/v1/course/search?q=	Search courses by title/description



improvements:
----------------
authentication using other platforms like google, facebook
library - passport.js, passport.authenticate('google')
Node Js--> passport
NextJs Backend-->need to use nextAuth

Cookie Based Authentication
Session Based Authentication

rate limiting middlewares

Make sure to handle large datasets with pagination if needed (limit, skip).